/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import useSwr from 'swr';
import type {
  Arguments,
  Key,
  SWRConfiguration
} from 'swr';

import useSWRMutation from 'swr/mutation';
import type {
  SWRMutationConfiguration
} from 'swr/mutation';

import type {
  AdminGetAllUsersParams,
  HTTPValidationError,
  PaginatedUserListResponse,
  UserCreateRequest,
  UserListResponse,
  UserUpdateRequest
} from '../../models';

import { clientFetcher } from '../../../../lib/orval/mutator';
import type { ErrorType , BodyType } from '../../../../lib/orval/mutator';


  
  type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];


  
/**
 * Get all users with pagination and search - admin only
 * @summary Get All Users
 */
export const adminGetAllUsers = (
    params?: AdminGetAllUsersParams,
 options?: SecondParameter<typeof clientFetcher>) => {
    return clientFetcher<PaginatedUserListResponse>(
    {url: `/admin/users`, method: 'GET',
        params
    },
    options);
  }



export const getAdminGetAllUsersKey = (params?: AdminGetAllUsersParams,) => [`/admin/users`, ...(params ? [params]: [])] as const;

export type AdminGetAllUsersQueryResult = NonNullable<Awaited<ReturnType<typeof adminGetAllUsers>>>
export type AdminGetAllUsersQueryError = ErrorType<HTTPValidationError>

/**
 * @summary Get All Users
 */
export const useAdminGetAllUsers = <TError = ErrorType<HTTPValidationError>>(
  params?: AdminGetAllUsersParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof adminGetAllUsers>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof clientFetcher> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getAdminGetAllUsersKey(params) : null);
  const swrFn = () => adminGetAllUsers(params, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * Create new user - admin only
 * @summary Create User
 */
export const adminCreateUser = (
    userCreateRequest: BodyType<UserCreateRequest>,
 options?: SecondParameter<typeof clientFetcher>) => {
    return clientFetcher<UserListResponse>(
    {url: `/admin/users`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: userCreateRequest
    },
    options);
  }



export const getAdminCreateUserMutationFetcher = ( options?: SecondParameter<typeof clientFetcher>) => {
  return (_: Key, { arg }: { arg: UserCreateRequest }): Promise<UserListResponse> => {
    return adminCreateUser(arg, options);
  }
}
export const getAdminCreateUserMutationKey = () => [`/admin/users`] as const;

export type AdminCreateUserMutationResult = NonNullable<Awaited<ReturnType<typeof adminCreateUser>>>
export type AdminCreateUserMutationError = ErrorType<HTTPValidationError>

/**
 * @summary Create User
 */
export const useAdminCreateUser = <TError = ErrorType<HTTPValidationError>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof adminCreateUser>>, TError, Key, UserCreateRequest, Awaited<ReturnType<typeof adminCreateUser>>> & { swrKey?: string }, request?: SecondParameter<typeof clientFetcher>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getAdminCreateUserMutationKey();
  const swrFn = getAdminCreateUserMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * Update user admin status and active status - admin only
 * @summary Update User
 */
export const adminUpdateUser = (
    userId: string,
    userUpdateRequest: BodyType<UserUpdateRequest>,
 options?: SecondParameter<typeof clientFetcher>) => {
    return clientFetcher<unknown>(
    {url: `/admin/users/${userId}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: userUpdateRequest
    },
    options);
  }



export const getAdminUpdateUserMutationFetcher = (userId: string, options?: SecondParameter<typeof clientFetcher>) => {
  return (_: Key, { arg }: { arg: UserUpdateRequest }): Promise<unknown> => {
    return adminUpdateUser(userId, arg, options);
  }
}
export const getAdminUpdateUserMutationKey = (userId: string,) => [`/admin/users/${userId}`] as const;

export type AdminUpdateUserMutationResult = NonNullable<Awaited<ReturnType<typeof adminUpdateUser>>>
export type AdminUpdateUserMutationError = ErrorType<HTTPValidationError>

/**
 * @summary Update User
 */
export const useAdminUpdateUser = <TError = ErrorType<HTTPValidationError>>(
  userId: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof adminUpdateUser>>, TError, Key, UserUpdateRequest, Awaited<ReturnType<typeof adminUpdateUser>>> & { swrKey?: string }, request?: SecondParameter<typeof clientFetcher>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getAdminUpdateUserMutationKey(userId);
  const swrFn = getAdminUpdateUserMutationFetcher(userId, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * Delete user - admin only
 * @summary Delete User
 */
export const adminDeleteUser = (
    userId: string,
 options?: SecondParameter<typeof clientFetcher>) => {
    return clientFetcher<unknown>(
    {url: `/admin/users/${userId}`, method: 'DELETE'
    },
    options);
  }



export const getAdminDeleteUserMutationFetcher = (userId: string, options?: SecondParameter<typeof clientFetcher>) => {
  return (_: Key, __: { arg: Arguments }): Promise<unknown> => {
    return adminDeleteUser(userId, options);
  }
}
export const getAdminDeleteUserMutationKey = (userId: string,) => [`/admin/users/${userId}`] as const;

export type AdminDeleteUserMutationResult = NonNullable<Awaited<ReturnType<typeof adminDeleteUser>>>
export type AdminDeleteUserMutationError = ErrorType<HTTPValidationError>

/**
 * @summary Delete User
 */
export const useAdminDeleteUser = <TError = ErrorType<HTTPValidationError>>(
  userId: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof adminDeleteUser>>, TError, Key, Arguments, Awaited<ReturnType<typeof adminDeleteUser>>> & { swrKey?: string }, request?: SecondParameter<typeof clientFetcher>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getAdminDeleteUserMutationKey(userId);
  const swrFn = getAdminDeleteUserMutationFetcher(userId, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

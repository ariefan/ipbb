/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import useSwr from 'swr';
import type {
  Key,
  SWRConfiguration
} from 'swr';

import type {
  DatSubjekPajakResponse
} from '../../models';

import { clientFetcher } from '../../../../lib/orval/mutator';
import type { ErrorType } from '../../../../lib/orval/mutator';


  
  type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];


  
/**
 * Get current user's profile data from dat_subjek_pajak based on email
 * @summary Get My Profile
 */
export const profileGetMyProfile = (
    
 options?: SecondParameter<typeof clientFetcher>) => {
    return clientFetcher<DatSubjekPajakResponse>(
    {url: `/profile/me`, method: 'GET'
    },
    options);
  }



export const getProfileGetMyProfileKey = () => [`/profile/me`] as const;

export type ProfileGetMyProfileQueryResult = NonNullable<Awaited<ReturnType<typeof profileGetMyProfile>>>
export type ProfileGetMyProfileQueryError = ErrorType<unknown>

/**
 * @summary Get My Profile
 */
export const useProfileGetMyProfile = <TError = ErrorType<unknown>>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof profileGetMyProfile>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof clientFetcher> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getProfileGetMyProfileKey() : null);
  const swrFn = () => profileGetMyProfile(requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * Toggle current user's admin status
 * @summary Toggle Admin
 */
export const profileToggleAdmin = (
    
 options?: SecondParameter<typeof clientFetcher>) => {
    return clientFetcher<unknown>(
    {url: `/profile/toggle-admin`, method: 'GET'
    },
    options);
  }



export const getProfileToggleAdminKey = () => [`/profile/toggle-admin`] as const;

export type ProfileToggleAdminQueryResult = NonNullable<Awaited<ReturnType<typeof profileToggleAdmin>>>
export type ProfileToggleAdminQueryError = ErrorType<unknown>

/**
 * @summary Toggle Admin
 */
export const useProfileToggleAdmin = <TError = ErrorType<unknown>>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof profileToggleAdmin>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof clientFetcher> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getProfileToggleAdminKey() : null);
  const swrFn = () => profileToggleAdmin(requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
